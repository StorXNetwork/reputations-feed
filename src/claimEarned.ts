import {
    Inactivation, Inactivate
  } from "./helpers/feed";
  import { toXdcAddress } from 'xdc3-utils';
  import { ContractData } from "./models/contract-data";
  import nodejson from './node-inactivation.json';
  import { GoogleSpreadsheet } from 'google-spreadsheet';
  import { JWT } from 'google-auth-library';
  
  export async function ClaimEarned() {
    const data = await ContractData.findOne({})
    const stakeHolders = Object.keys(data.stakeHolders);
    let sortedStakeHolders = [];
    for(let j = 0; j < stakeHolders.length; j++) {
        // let rep = Number(data.stakeHolders[stakeHolders[j]].reputation);
        // let stake = Number(data.stakeHolders[stakeHolders[j]].stake.stakedAmount)/1000000000000000000;
        // if (rep == 0 && stake > 1000){
        sortedStakeHolders.push(stakeHolders[j])
        // }
    }
    
    for(let i = 0; i < sortedStakeHolders.length; i++) {
        await new Promise((resolve) => setTimeout(resolve, 8000));
        console.log(toXdcAddress(sortedStakeHolders[i]));
        Inactivation(toXdcAddress(sortedStakeHolders[i]));
    }
  }

  export async function InactivateNodeCron() {
    const serviceAccountAuth = new JWT({
      // env var values here are copied from service account credentials generated by google
      // see "Authentication" section in docs for more info
      email: nodejson.client_email,
      key: nodejson.private_key,
      scopes: [
        'https://www.googleapis.com/auth/spreadsheets',
      ],
    });
    const doc = new GoogleSpreadsheet('1H7Qkmv9wwaRCzLOkPSYY2tPiVnyGyP3U5x-bgQpyS_k', serviceAccountAuth);

    await doc.loadInfo(); // loads document properties and worksheets

    const sheet = doc.sheetsByIndex[0]; // or use `doc.sheetsById[id]` or `doc.sheetsByTitle[title]`
    await sheet.loadCells('A1:E10');
    const a1 = sheet.getCell(0, 3);
    const rows = await sheet.getRows(); 
    const len = rows.length;
    let count = 0;
    let arr = [];
    for(let i = a1.value || 0; i < len; i++){
      if(count < 20){
        if(!rows[i].get('Staking Amount')){
            arr.push(rows[i].get('Address'));
            count++;
        };
      }else{
        a1.value = i;
        await sheet.saveUpdatedCells();
        break;
      };
    }
    for(let i = 0; i < arr.length; i++){
      Inactivate(arr[i]);
    }
  }
  